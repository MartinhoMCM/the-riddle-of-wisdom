{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/martinho.mussamba/development/game/angular-16/the-riddle-of-wisdom/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ChatService } from './data-ai-processing';\nlet AppComponent = class AppComponent {\n  constructor(translate, dataProcessing) {\n    this.translate = translate;\n    this.dataProcessing = dataProcessing;\n    this.title = 'the-riddle-of-wisdom';\n    this.words = \"\";\n    this.chances = 8;\n    this.guessChar = '';\n    this.isAi = false;\n    this.isHuman = false;\n    this.selectCategory = '';\n    this.indexSelected = 0;\n    this.geminiIsProcessing = false;\n    this.categories = ['VOCABULARY', 'COUNTRIES', 'CITIES', 'MATH_SEQUENCE', 'FOOTBALL_CLUBS', 'CELEBRITIES', 'MOVIE_TITLES'];\n    this.totalWords = 0;\n    this.completedWords = 0;\n    this.currentWord = '';\n    this.guessedWord = '';\n    this.states = [{\n      name: 'English',\n      abbrev: 'en'\n    }, {\n      name: 'Português',\n      abbrev: 'pt'\n    }];\n    this.currentLang = 'en';\n    this.fonteWordsEn = [];\n    this.fonteWordsPt = [];\n    this.fonteWords = [];\n    this.numberOfTrying = 0;\n    this.isWin = false;\n    this.isLose = false;\n    this.totalGuesses = 5;\n    this.reloading = false;\n    translate.setDefaultLang('pt');\n    this.form = new FormGroup({\n      state: new FormControl(this.states[0])\n    });\n  }\n  getLanguage() {\n    this.form.get('state').valueChanges.subscribe(value => {\n      if (value) {\n        this.switchLanguage(value.abbrev);\n      }\n    });\n  }\n  switchLanguage(language) {\n    this.translate.use(language);\n  }\n  ngOnInit() {\n    this.getLanguage();\n    this.Initilization();\n  }\n  InitChar() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.selectCategory = _this.categories[0];\n      _this.reloading = true;\n      const newSeq = yield _this.dataProcessing.sendMessage(`Categoria: ${_this.selectCategory}, língua: ${_this.states[0].abbrev}`);\n      _this.reloading = false;\n      _this.fonteWords = _this.processedData(newSeq);\n      _this.generateWord();\n    })();\n  }\n  processedData(data) {\n    const regex = /\\[(.*?)\\]/;\n    const match = data.match(regex);\n    console.log(\"data \", JSON.parse(data));\n    if (this.selectCategory === 'MATH_SEQUENCE') {\n      return JSON.parse(data);\n    }\n    if (match) {\n      const conteudo = match[1];\n      const arrayDeStrings = JSON.parse(`[${conteudo}]`);\n      return arrayDeStrings;\n    }\n    return [];\n  }\n  youLose() {\n    //  showMessage(`You Lose! The word was ${newWord.toUpperCase()}.`);\n    //  resetCard.style.backgroundImage = `url(assets/rain.gif)`;\n    //  gameEnd();\n  }\n  youWin() {}\n  Initilization() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.switchLanguage(_this2.states[0].abbrev);\n      yield _this2.InitChar();\n      _this2.maskedWord = _this2.maskWord(_this2.currentWord);\n      _this2.isHuman = true;\n      _this2.displayWord();\n    })();\n  }\n  nextCategory(index) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const abbrev = _this3.form.get('state').value.abbrev;\n      _this3.reloading = true;\n      const newSeq = yield _this3.dataProcessing.sendMessage(`Categoria: ${_this3.selectCategory}, língua: ${abbrev}`);\n      _this3.reloading = false;\n      _this3.fonteWords = _this3.processedData(newSeq);\n      _this3.generateWord();\n      _this3.maskedWord = _this3.maskWord(_this3.currentWord);\n      _this3.isHuman = true;\n      _this3.displayWord();\n    })();\n  }\n  startGame() {\n    if (this.guessChar) {\n      this.userGuess(this.guessChar);\n    }\n  }\n  restartGame() {\n    this.reset();\n    this.generateWord();\n    this.maskedWord = this.maskWord(this.currentWord);\n    this.isHuman = true;\n    this.displayWord();\n  }\n  selectedCategory(index) {\n    this.isWin = false;\n    this.isLose = false;\n    this.selectCategory = this.categories[index];\n    this.indexSelected = index;\n    this.nextCategory(index);\n  }\n  removeSpaces(input) {\n    return input.replace(/\\s+/g, '');\n  }\n  generateWord() {\n    if (this.fonteWords.length > 0) {\n      const word = this.fonteWords[Math.floor(Math.random() * this.fonteWords.length)];\n      if (this.selectCategory !== 'MATH_SEQUENCE') {\n        this.currentWord = word.toUpperCase();\n        this.guessedWord = this.currentWord.substring(0, 1);\n      } else if (this.selectCategory === 'MATH_SEQUENCE') {\n        this.clearAll();\n        this.fonteWords.forEach(value => {\n          this.currentWord += value;\n          this.guessedWord = this.currentWord.substring(0, 1);\n        });\n      }\n    }\n  }\n  clearAll() {\n    this.currentWord = '';\n    this.guessedWord = '';\n  }\n  reset() {\n    this.currentWord = '';\n    this.guessedWord = '';\n    this.isWin = false;\n    this.isLose = false;\n    this.totalGuesses = 5;\n    this.numberOfTrying = 0;\n    this.guessChar = '';\n  }\n  maskWord(word) {\n    if (word.length < 2) return word;\n    if (word.length > 5) {\n      const middleIndex = Math.floor(word.length / 2);\n      return word[0] + \"■\".repeat(middleIndex - 1) + word[middleIndex] + \"■\".repeat(word.length - middleIndex - 2) + word[word.length - 1];\n    }\n    return word[0] + \"■\".repeat(word.length - 2) + word[word.length - 1];\n  }\n  userGuess(letter) {\n    if (this.isHuman) {\n      const contains = this.revealLetter(letter);\n      if (contains) {\n        this.displayWord();\n      } else {\n        this.numberOfTrying++;\n        if (this.numberOfTrying === 5) {\n          this.isLose = true;\n          this.isWin = false;\n        }\n      }\n    } else {}\n    this.guessChar = '';\n  }\n  revealLetter(letter) {\n    for (let i = 0; i < this.currentWord.length; i++) {\n      if (this.currentWord[i] === letter && this.maskedWord[i] === '■') {\n        this.maskedWord = this.maskedWord.substring(0, i) + letter + this.maskedWord.substring(i + 1);\n        return true;\n      }\n    }\n    return false;\n  }\n  displayWord() {\n    if (this.maskedWord === this.currentWord) {\n      this.isWin = true;\n      this.isLose = false;\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n}), __metadata(\"design:paramtypes\", [TranslateService, ChatService])], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}